---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import TableOfContentsWidget from "../components/TableOfContentsWidget.astro";
const { frontmatter = { toc: true } } = Astro.props;
---

<html lang="en">
    <BaseHead />
    <body class="bg-skin-secondary">
        <Header />
        <main
			class="container p-4 pt-8 cursor-default text-skin-base pb-32 w-[90%] mx-auto relative"
			id="app"
		>
            <div class="grid grid-cols-4 gap-8">
                <div class="col-span-4 xl:col-span-3 space-y-4">
                    <button
                        class="flex items-center text-md cursor-pointer hover:text-skin-active outline-none"
                        style="background-color: inherit;"
                        onclick="history.back()"
                    >
                        <i class="ri-arrow-left-line mr-2"></i>
                        <span>Go Back</span>
                    </button>
                    <slot />
                </div>
                <div class="hidden xl:block col-span-1 relative">
                    {frontmatter.toc && <TableOfContentsWidget />}
                </div>
                <!-- <ScrollToTop /> -->
            </div>
            <Footer />
        </main>
    </body>
</html>

<script>
    //   import { Fancybox } from "@fancyapps/ui";
    //   import "@fancyapps/ui/dist/fancybox/fancybox.css";
    //   Fancybox.bind("[data-fancybox]");
    // 给所有的a标签添加target属性和不追踪
    const markdownBody = document.querySelector(".markdown-body");
    // 如果没有markdownBody则直接返回
    if (markdownBody) {
        let images = markdownBody.querySelectorAll("img");
        const callback = (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const image = entry.target;
                    const data_src = image.getAttribute("data-src");
                    const data_alt = image.getAttribute("data-alt");
                    image.setAttribute("data-fancybox", "gallery");
                    if (data_src) {
                        image.setAttribute("src", data_src);
                    }
                    if (data_alt) {
                        image.setAttribute("alt", data_alt);
                    }
                    observer.unobserve(image);
                }
            });
        };

        const observer = new IntersectionObserver(callback);
        images.forEach((image) => {
            observer.observe(image);
        });

        var links = markdownBody.querySelectorAll("a");
        // 循环遍历链接标签
        for (var i = 0; i < links.length; i++) {
            // 给每个链接标签添加 target 属性
            links[i].setAttribute("target", "_blank");
            links[i].setAttribute("rel", "nofollow noreferrer");
        }
    }
</script>
